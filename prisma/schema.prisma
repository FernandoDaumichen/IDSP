// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./database/dev.db"
}

model User {
  id         Int       @id @default(autoincrement())
  username   String    @unique
  secretQuestion String @default("")
  secretAnswer String @default("")
  email      String    @unique
  password   String
  profileImg String?
  buckets    Bucket[]  
  comments   Comment[] 
  followers  User[]    @relation("UserFollows")
  following  User[]    @relation("UserFollows")
  likes      Like[] 
}

model Tag {
  id      Int      @id @default(autoincrement())
  tagName String
  buckets Bucket[]
}

model Bucket {
  id        Int       @id @default(autoincrement())
  startDate DateTime  @default(now())
  dueDate   DateTime
  title     String
  completed Boolean
  userId    Int
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tagId     Int
  tag       Tag       @relation(fields: [tagId], references: [id])
  Task      Task[]
  messages  Message[]
}

model Task {
  id        Int     @id @default(autoincrement())
  message   String
  completed Boolean
  bucketId  Int
  bucket    Bucket  @relation(fields: [bucketId], references: [id], onDelete: Cascade)
}

model Message {
  id        Int       @id @default(autoincrement())
  content   String
  photo     String?
  bucketId  Int
  bucket    Bucket    @relation(fields: [bucketId], references: [id], onDelete: Cascade)
  comments  Comment[]
  likes     Like[]
  createdAt DateTime  @default(now())
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  messageId Int
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Like {
  id          Int       @id @default(autoincrement())
  userId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messageId   Int
  message     Message   @relation(fields: [messageId], references: [id], onDelete: Cascade)
}