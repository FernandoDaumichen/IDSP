<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link href="../styles/style_showBucket.css" rel="stylesheet" />
  <title>Your Bucket Progress ðŸ˜‰</title>
  <script src="https://unpkg.com/dom-confetti@0.0.13"></script>
</head>
<style>
  @import url("https://fonts.googleapis.com/css2?family=Open+Sans:wght@300;400;600;700&display=swap");
  @import url("https://fonts.googleapis.com/css2?family=Quicksand:wght@300;400;500;600;700&display=swap");
  @import url("https://fonts.googleapis.com/css2?family=SF+Pro+Display&display=swap");

  .wrapper {
    /* max-width: 375px; limit the maximum width */
    height: 100vh;
    width: 100%;
    background: #fffefe;
    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);
    /* border-radius: 30px; */
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    overflow: hidden;
    overflow-y: auto;
    scrollbar-width: none;
    /* Firefox */
    -ms-overflow-style: none;
    
  }

  .background-container {
    background-color: #ffffff;
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: flex-start;
    position: relative;
    padding-top: 5vh;
    padding-bottom: 5px;
    box-sizing: border-box;
    border-radius: 0 20px 20px;
    /* height: 37vh; */
    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);
  }

  .arrow-left {
    position: absolute;
    top: 3vh;
    left: 3vh;
    cursor: pointer;
    background-color: transparent;
    border: none;
  }

  h1 {
    font-family: 'Open Sans', sans-serif;
    font-size: 2.5rem;
    font-weight: 600;
    color: #0E0E0E;
    margin-bottom: 0;
    text-align: center;
    font-weight: 700;
    margin-bottom: 2vh;
  }

  h2{
    text-align: center;
    font-family: 'Open Sans', sans-serif;
    font-weight: 600;
  }

  .Create-Goal {
    display: block;
    margin: auto;
    background: #8083ff;
    border-radius: 2.5vh;
    border: none;
    padding: 1vh 1vh;
    font-size: 1rem;
    cursor: pointer;
    width: 19.3vh;
    font-family: "Open sans", sans-serif;
    color: #ffffff;
    font-size: 2vh;
    position: relative;
    bottom: 0;
    transform: translateX(-0%);
    /* centering horizontally */
  }




.input-container {
  display: flex;
  justify-content: center;
  align-items: center;

  margin: auto;
}

input[name="taskEntry"] {
    width: 70%;
    padding: 1vh;
    border: 1px solid #8083ff;
    border-radius: 2.5vh;
    font-family: "Open sans", sans-serif;
    font-size: 2vh;

}

button#addTask {
  margin-left: 1vh;
  padding: 1vh 2vh;
  border: none;
  border-radius: 2.5vh;
  background-color: #8083ff;
  color: #ffffff;
  font-family: "Open sans", sans-serif;
  font-size: 2vh;
  cursor: pointer;

}
  ul {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  width: 100%;
  padding: 0;
}



button#addTask {
  margin-left: 2vh;
}
button#completeBucketlist {
  display: block;
  margin: 2vh auto;
}


li{
  display: flex;
    align-items: center;
    justify-content: space-between;
    width: 100%;
    padding: 1vh 1vh;
    /* border: 1px solid #8083ff; */
    font-family: "Open sans", sans-serif;
    font-size: 2vh;
    list-style: none;
    margin: 0;
    padding: 1%;
}
label{
  display: flex;
  align-items: center;
  justify-content: center;
  width: 100%;
  padding: 1vh 1vh;
  /* border: 1px solid #8083ff; */
  font-family: "Open sans", sans-serif;
  font-size: 2vh;
  list-style: none;
  margin: 0;
  padding: 1%;
}
input[type="checkbox"]{
    /* margin-right: 32%; */
    width: 4.5vh;
    height: 4.5vh;
    cursor: pointer;
    border-radius: 50%;
    border: 1px solid #8083ff;
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    vertical-align: middle;
    margin: 0%;
  

}




input[type="checkbox"]:checked:before {
  content: "\2713";
  display: block;
  text-align: center;
  font-size: 3vh;
  color: #8083ff;
  /* line-height: 2.5vh; */
}
progress{
  width:28vh;
}
button:disabled {
  background-color: #a1a1a1 !important;
  cursor: default !important;
}

p {
  font-size: 2.05vh;
    text-align: center;
    font-family: 'Opens Sans', sans-serif;
}

hr {
  width: 14%;
    margin: 0 auto;
    border: 1px solid #8083ff;
}

progress[value]::-webkit-progress-bar {
  background-color: #f3f3f3; /* Color of the total progress bar for Chrome */
}

progress[value]::-webkit-progress-value {
  background-color: #8083ff; /* Color of the filled progress bar for Chrome */
}

progress[value]::-moz-progress-bar {
  background-color: #8083ff; /* Color of the filled progress bar for Firefox */
}

progress[value]::-ms-fill {
  background-color: #8083ff; /* Color of the filled progress bar for IE */
}

  #progressbar {
    height: 20%;
    background-color: #f3f3f3;
    border-radius: 10px;
    overflow: hidden;     
    height: 2vh;
    border: 2px solid #8083ff;
    
}

div#completeList {
  width: 100%;
    height: 18%;

}

.return-link{
  position: absolute;
    font-family: 'Open Sans', sans-serif;
    font-weight: 700;
    margin-top: 3vh;
    text-decoration: none;
    align-items: center;
    justify-content: center;
    background: linear-gradient( 38deg, rgba(116, 209, 174, 0.75) 1.82%, rgba(116, 209, 174, 0.75) 30.9%, rgba(128, 131, 255, 0.75) 72.64% );
    background-size: 200% 200%;
    animation: Gradient 5s linear infinite;
    /* color: #0000; */
    width: 100%;
    padding: 8vh 0px;
    height: -29%;
    font-size: 3vh;
    text-align: center;
    /* margin-right: -52px; */
}


@keyframes Gradient {
  0% {
    background-position: 0% 50%;
  }
  50% {
    background-position: 100% 50%;
  }
  100% {
    background-position: 0% 50%;
  }
}

/* ANIMATION */

h1 {
  font-family: "Open Sans", sans-serif;
  font-style: normal;
  font-weight: 600;
  font-size: 2.4vh;
  text-align: center;
  width: 90%;
  margin-left: auto;
  margin-right: auto;
  margin-bottom: 2vh;
}

.modal {
  display: none;
  position: fixed;
  z-index: 1;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(231, 231, 231, 0.937);
}

.modal-content {
  position: relative;
  background-color: white;
  margin: 15vh auto;
  padding: 2vh;
  width: 45%;
  border-radius: 10px;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

.congrats {
  text-align: center;
  margin-bottom: 2vh;
}

.modal-content::before {
  content: "";
  position: absolute;
  top: -5px;
  left: -5px;
  right: -5px;
  bottom: -5px;
  z-index: -1;
  background: linear-gradient(
    180deg,
    rgba(185, 255, 229, 0.75) 0%,
    rgba(128, 131, 255, 0.75)
  );
  border-radius: 15px;
}

.modal-content h2 {
  text-align: center;
  font-size: 2rem;
  color: #333;
  font-family: "Open Sans", sans-serif;
}

.post-btn {
  background-color: #8083ff;
  border: none;
  color: #ffffff;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-family: "Open Sans", sans-serif;
  font-size: 16px;
  margin: 3vh 1vh;
  cursor: pointer;
  padding: 1.5vh 2vh;
  border-radius: 20px;
  transition-duration: 0.4s;
  width: 80%;
}
.post-btn:hover {
  background-color: #5a5fff;
  color: #ffffff;
}

.modal-gifs {
  display: flex;
  justify-content: center;
  align-items: center;
  margin-bottom: 2vh;
  width: 100%;
  height: auto;
}


.party-popper,
.party-popper-inverted,
.partying-face {
  max-width: 14vw;
  height: auto;
}

@media screen and (max-width: 600px) {
  .party-popper,
  .party-popper-inverted,
  .partying-face {
    max-width: 16vw;
  }
}


</style>

<body>
  <div class="wrapper">
    <div class="background-container">
      <button class="arrow-left" onclick="goBack()" style="z-index: 10px;">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="3vh" height="3vh">
          <path fill="#8083ff"
            d="M314.6,449.6L65.9,256l248.7-193.6c6.5-5.1,6.9-14.5,1.8-21s-14.5-6.9-21-1.8l-271.4,212c-3.7,2.9-5.7,7.4-5.7,12.1s2,9.2,5.7,12.1l271.4,212c2.8,2.2,6.2,3.3,9.6,3.3c3.4,0,6.7-1.1,9.6-3.3C321.1,464.1,321.1,454.7,314.6,449.6z" />
        </svg>
      </button>
      <h1>
        <%=bucket.title%>
      </h1>
      <div id = "bar"></div>
      <p>Start on <%=bucket.startDate%></p>
      <hr>
      <p>Finish by <%=bucket.dueDate%></p>
      </div>
          <br>
          <br>
    
          <h2> Daily Tasks </h2>
          <p> Get started on your daily tasks!</p>
          <div class = "daily-task-summary">
            <p id="completedTaskCount"><%= numOfCompleted %>/<%=bucket.Task.length%> Milestone Tasks Completed</p>
          </div>
          <div id = "task-list-div">
            <ul id = "task-list">
            </ul>
          </div>
        <div class="input-container">
          <input type="text" name="taskEntry" placeholder="Enter your milestone task">
          <button  id="addTask">Add</button>
        </div>
          <div id="completeList">
            <button  id="completeBucketlist" class="Create-Goal">Complete Bucketlist</button>
          </div>
        

          <div class="modal" id="modal">
            <div class="modal-content">
              <div class="modal-gifs">
                <img class="partying-face" src="../styles/images/partying-face_1f973.png" alt="Partying Face">
                <img class="party-popper" src="../styles/images/partying-face_1f973.png" alt="Party Popper">
                <img class="party-popper-inverted" src="../styles/images/party-popper_1f389.png" alt="Party Popper Inverted">
              </div>
      
              <h2>WooHoo!</h2>
              <p class="congrats">Congratulations on completing a goal !</p>
              <a id="post-picture-video" class="post-btn" href="/profile/postMessage/<%=bucket.id%>">Post a Picture/Video</a>
              <a id="post-message" class="post-btn" href="/profile/postMessageOnly/<%=bucket.id%>">Post a Message</a>
              <a id="none" class="post-btn" href="/feeds/buckets?show=completed">None</a>
      
            </div>
          </div>
    </div>

</body>
<script defer src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.4.0"></script>
<script>

  //DOM SELECTORS:
  const AddTaskButton = document.querySelector("#addTask");
  const taskInput = document.querySelector('input[name="taskEntry"]');
  const taskListUL = document.querySelector("#task-list");
  const barDiv = document.querySelector("#bar");

  const pathArr = window.location.pathname.split("/");
  const bucketId = pathArr[pathArr.length - 1];
  const dailyTaskSummary = document.querySelector('.daily-task-summary');
  const milestoneTasksCompleted = dailyTaskSummary.querySelector('p').textContent;

  //FETCH POST AND GET FUNCTIONS: 
  const post = async (url, data) => {
    try {
      const res = await fetch(url, {
        body: JSON.stringify(data),
        method: "POST",
        headers: { "Content-Type": "application/json" },
      });
      return await res.json();
    } catch (error) {
      console.log(error);
      return { error: "An error occurred" };
    }
  };
  const get = async (url) => {
    try {
      const res = await fetch(url, {
        method: "GET",
        headers: { "Content-Type": "application/json" },
      });
      return await res.json();
    } catch (error) {
      console.log(error);
      return { error: "An error occurred" };
    }
  };

  function goBack() {
    window.history.back();
  }

  const updateDailyTaskSummary = (numOfCompleted, totalTasks) => {
    const completedTaskCount = document.querySelector("#completedTaskCount");
    const summaryText = `${numOfCompleted}/${totalTasks} Milestone Tasks Completed`;
    completedTaskCount.textContent = summaryText;
  };

  const createProgressBar = (numOfCompleted, taskLength) => {
  let progress = document.querySelector("#progressbar");
  if (!progress) {
    progress = document.createElement("progress");
    progress.id = "progressbar";
    barDiv.appendChild(progress);
  }
  progress.value = numOfCompleted;
  progress.max = taskLength;
  progress.textContent = `${(numOfCompleted / taskLength) * 100}%`;
};



const updateProgressBarAndSummary = () => {
  const checkboxesNodes = document.querySelectorAll('input[name="milestoneTask"]');
  const checkboxes = Array.from(checkboxesNodes);
  const numOfCompleted = checkboxes.filter((checkbox) => checkbox.checked).length;
  const taskLength = checkboxes.length;
  createProgressBar(numOfCompleted, taskLength);
  updateDailyTaskSummary(numOfCompleted, taskLength);

  // Show the congratulations message when progress is at 100% // needs implementaion
  const congratulationsMessage = document.querySelector('#congratulations-message');
if (numOfCompleted == taskLength) {
  congratulationsMessage.style.display = 'block';
} else {
  congratulationsMessage.style.display = 'none';
}
};

// createTaskElement
  const createTaskElement = (task) => {

    const li = document.createElement("li");
    const label = document.createElement("label");
    const input = document.createElement("input");
    input.type = "checkbox";
    if (task.completed) {
      input.checked = true;
    }
    input.name = "milestoneTask";
    input.value = task.id;

    // Add event listener to checkbox
    input.addEventListener("change", async function (event) {
      const completed = event.target.checked == true;
      const taskId = event.target.value;
      const res = await post("/feeds/updateTask", { taskId, completed });
      updateProgressBarAndSummary();
      // location.reload();
      window.location.href = window.location.href;
    });

    label.appendChild(input);
    li.appendChild(label);
    label.appendChild(document.createTextNode(task.message));
    return li;
  };

  const clearTaskList = () => {
    taskListUL.innerHTML = "";
  };

  const clearTaskListAndUpdateSummary = () => {
    taskListUL.innerHTML = "";

  updateProgressBarAndSummary();
};


  const addTaskToList = (task) => {
    const taskElement = createTaskElement(task);
    taskListUL.appendChild(taskElement);
    updateProgressBarAndSummary();
  };

  const getBucket = async () => {
    const res = await post("/feeds/getBucket", { bucketId });
    const bucketCompleted = res.bucket.completed;
    const taskEntry = document.querySelector('input[type="text"][name="taskEntry"]');
    const addTaskButton = document.getElementById("addTask");
    const completeBucketlistButton = document.getElementById("completeBucketlist");

    if(bucketCompleted){
      taskEntry.setAttribute("disabled", "");
      addTaskButton.setAttribute("disabled", "");
      completeBucketlistButton.setAttribute("disabled", "");
    } else {
      taskEntry.removeAttribute("disabled");
      addTaskButton.removeAttribute("disabled");
      completeBucketlistButton.removeAttribute("disabled");
    }
    }

  getBucket();

  const getTask = async () => {
    try {
      const res = await post("/feeds/getTask", { bucketId });
      const tasks = res.tasks;
      let numOfCompleted = 0;

      tasks.forEach((task) => {
        if (task.completed) {
          numOfCompleted++;
        }
      });

      const taskLength = res.tasks.length;

      clearTaskList();

      if (tasks.length > 0) {
        createProgressBar(numOfCompleted, taskLength);
        tasks.forEach((task) => {
          const taskElement = createTaskElement(task);
          taskListUL.appendChild(taskElement);
        });
      }
      taskInput.value = "";
    } catch (error) {
      console.log(error);
    }
  };

  getTask();

  document.querySelector("#completeBucketlist").addEventListener("click", async () => {
    const pathArr = window.location.pathname.split("/");
    const bucket_id = pathArr[pathArr.length - 1];

    const res = await fetch("/feeds/completeBuckets", { body: JSON.stringify({ bucket_id }), method: "POST", headers: { "Content-Type": "application/json"} });
    const { success } = await res.json();
    const completeList = document.querySelector("#completeList");
    completeList.innerHTML = `<a href="/feeds/buckets?show=completed" class="return-link"> < Return to Bucket List</a>`

        // Display the modal
        modal.style.display = 'block';
    
    // Fire the confetti
    fireConfetti();

  })

  AddTaskButton.addEventListener("click", async () => {
    if (taskInput.value) {
      const newTask = taskInput.value;
      const pathArr = window.location.pathname.split("/");
      const bucketId = pathArr[pathArr.length - 1];

      try {

        const response = await post("/feeds/addTask", { newTask, bucketId });
        if (response.success) {
          const task = {
            id: response.taskId,
            message: newTask,
            completed: false,
          };
          addTaskToList(task);
          // location.reload()
          // window.location.href = "https://google.ca";
        }
      } catch (error) {
        console.log(error);
      }
    } else {
      alert("Please enter a new task");
    }
    taskInput.value = "";
  });




  const bucketImgs = document.querySelectorAll(".bucket-img");
  const modal = document.getElementById("modal");

  function fireConfetti() {
    const end = Date.now() + 1000; // animation duration: 3000ms

    function frame() {
      confetti({
        particleCount: 7,
        angle: 60,
        spread: 55,
        origin: { x: 0 },
        colors: ['#a568f6', '#e63d87', '#00c7e4', '#fdd67e']
      });
      confetti({
        particleCount: 7,
        angle: 120,
        spread: 55,
        origin: { x: 1 },
        colors: ['#a568f6', '#e63d87', '#00c7e4', '#fdd67e']
      });

      if (Date.now() < end) {
        // requestAnimationFrame(frame);
        setTimeout(frame, 50);
      }
    };

    frame();
  }



  window.addEventListener('click', function (event) {
  if (event.target == modal) {
    modal.style.display = 'none';
  }
});

</script>

</html>